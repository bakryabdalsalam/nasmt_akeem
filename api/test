i build a sestem with node js for rejesteration form and i use vercel for host and mangodp for database now i need to add one mor feture to this project i need to allow the admin to add or delet or eidit the موظف خدمة العملاء from the admin page to apperr in the select drop dowen in the regesteration form this is the file strector of the project                                                   api folder (auth.js , users.js) controllers (authController.js, userController.js) public(scripts folder(admin.js, login.js, registration.js), admin.html, login.html, index.html, logo, style.css ) , server.js and this is the files code 
1-auth.js 
const adminUsers = { [process.env.ADMIN_USERNAME]: process.env.ADMIN_PASSWORD };

module.exports = function handler(req, res) {
  if (req.method === 'POST') {
    const { username, password } = req.body;
    if (adminUsers[username] === password) {
      req.session.authenticated = true;
      res.status(200).json({ message: 'Login successful' });
    } else {
      res.status(401).json({ error: 'Invalid username or password' });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
};
user.js
const mongoose = require('mongoose');
require('dotenv').config();

const userSchema = new mongoose.Schema({
  name: String,
  phone: String,
  id: String,
  nationalities: String,
  customerService: String,
  prizeDraw: Boolean,
  number: Number,
});

const User = mongoose.models.User || mongoose.model('User', userSchema);

module.exports = async function handler(req, res) {
  try {
    await mongoose.connect(process.env.MONGODB_URI);

    if (req.method === 'GET') {
      const { page = 1, limit = 10, customerService = '', search = '' } = req.query;

      // Build query conditions
      const queryConditions = {};
      if (customerService) {
        queryConditions.customerService = customerService;
      }
      if (search) {
        queryConditions.$or = [
          { name: { $regex: search, $options: 'i' } },
          { phone: { $regex: search, $options: 'i' } },
          { id: { $regex: search, $options: 'i' } },
          { nationalities: { $regex: search, $options: 'i' } },
          { number: Number(search) }, // Searching by number directly
        ];
      }

      // Calculate total users for pagination
      const total = await User.countDocuments(queryConditions);

      // Fetch users with pagination and sorting
      const users = await User.find(queryConditions)
        .sort({ number: 1 })
        .skip((page - 1) * limit)
        .limit(parseInt(limit));

      res.json({ users, total });
    } else if (req.method === 'POST') {
      // Get the highest number currently in the database
      const highestNumberUser = await User.findOne().sort('-number').exec();
      const newNumber = highestNumberUser && highestNumberUser.number ? highestNumberUser.number + 1 : 1;

      const newUser = new User({
        ...req.body,
        number: newNumber,
      });
      await newUser.save();
      res.status(201).json(newUser);
    } else {
      res.setHeader('Allow', ['GET', 'POST']);
      res.status(405).end(`Method ${req.method} Not Allowed`);
    }
  } catch (error) {
    console.error('Database connection error:', error);
    res.status(500).json({ error: 'Database connection failed' });
  }
};
controllers folder 
1- authController.js
const adminUsers = { [process.env.ADMIN_USERNAME]: process.env.ADMIN_PASSWORD };

// Function to handle login
exports.login = (req, res) => {
  const { username, password } = req.body;
  if (adminUsers[username] === password) {
    req.session.authenticated = true; // Set session authenticated
    res.status(200).json({ message: "Login successful" });
  } else {
    res.status(401).json({ error: "Invalid username or password" });
  }
};
userController.js
const mongoose = require('mongoose');

// Define User Schema and Model
const userSchema = new mongoose.Schema({
  name: String,
  phone: String,
  id: String,
  nationalities: String,
  customerService: String,
  prizeDraw: Boolean,
  number: Number,
});

const User = mongoose.model('User', userSchema);

// Function to get all users with optional filtering
exports.getAllUsers = async (req, res) => {
  const { search, customerService, page = 1, limit = 10 } = req.query;

  const query = {};

  if (search) {
    query.$or = [
      { name: { $regex: search, $options: 'i' } },
      { phone: { $regex: search, $options: 'i' } },
      { id: { $regex: search, $options: 'i' } },
      { nationalities: { $regex: search, $options: 'i' } },
      { number: parseInt(search, 10) },
    ];
  }

  if (customerService) {
    query.customerService = customerService;
  }

  try {
    const total = await User.countDocuments(query);
    const users = await User.find(query)
      .skip((page - 1) * limit)
      .limit(parseInt(limit));

    res.json({
      total,
      page: parseInt(page, 10),
      limit: parseInt(limit, 10),
      users,
    });
  } catch (err) {
    res.status(500).json({ error: "Failed to retrieve users" });
  }
};

// Function to add a new user
exports.addUser = async (req, res) => {
  const { name, phone, id, nationalities, customerService, prizeDraw } = req.body;

  if (!name || !phone || !id || !nationalities || !customerService) {
    return res.status(400).json({ error: "All fields are required" });
  }

  if (!/^\d{10}$/.test(phone)) {
    return res.status(400).json({ error: "Phone number must be 10 digits" });
  }

  if (!/^\d{10}$/.test(id)) {
    return res.status(400).json({ error: "ID number must be 10 digits" });
  }

  try {
    const highestNumber = await User.findOne().sort('-number').exec();
    const nextNumber = highestNumber ? highestNumber.number + 1 : 1;

    const newUser = new User({
      name,
      phone,
      id,
      nationalities,
      customerService,
      prizeDraw,
      number: nextNumber,
    });

    await newUser.save();
    res.status(201).json(newUser);
  } catch (err) {
    res.status(500).json({ error: "Failed to add user" });
  }
};
public folder
    scripts folder
        admin.js
        document.addEventListener("DOMContentLoaded", function () {
  const usersTable = document.getElementById("usersTable").querySelector("tbody");
  const exportButton = document.getElementById("exportButton");
  const customerServiceFilter = document.getElementById("customerServiceFilter");
  const searchInput = document.getElementById("searchInput");
  let currentPage = 1;
  const limit = 10;
  let loading = false;
  let totalUsers = 0;

  async function loadRegisteredUsers(filter = "", searchTerm = "", page = 1) {
    if (loading) return;

    loading = true;
    let query = `/api/users?customerService=${filter}&page=${page}&limit=${limit}`;
    if (searchTerm) {
      query += `&search=${encodeURIComponent(searchTerm)}`;
    }

    const response = await fetch(query);
    const { users, total } = await response.json();
    totalUsers = total;

    if (page === 1) {
      usersTable.innerHTML = ""; // Clear table on new search/filter
    }

    if (users.length === 0 && page === 1) {
      usersTable.innerHTML = "<tr><td colspan='7'>لا توجد نتائج.</td></tr>";
    } else {
      users.forEach((user) => {
        const row = document.createElement("tr");
        row.innerHTML = `
          <td>${user.number !== undefined ? user.number : ''}</td>
          <td>${user.name}</td>
          <td>${user.phone}</td>
          <td>${user.id}</td>
          <td>${user.nationalities}</td>
          <td>${user.customerService}</td>
          <td>${user.prizeDraw ? "نعم" : "لا"}</td>
        `;
        usersTable.appendChild(row);
      });
    }

    loading = false;
  }

  function handleScroll() {
    if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 50 && !loading && usersTable.children.length < totalUsers) {
      currentPage++;
      loadRegisteredUsers(customerServiceFilter.value, searchInput.value, currentPage);
    }
  }

  function exportToExcel() {
    const table = document.getElementById("usersTable");
    const rows = Array.from(table.querySelectorAll("tr"));
    const csvContent = rows
      .map((row) => {
        const cols = Array.from(row.querySelectorAll("th, td"));
        return cols.map((col) => col.textContent).join(",");
      })
      .join("\n");

    const blob = new Blob([csvContent], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.setAttribute("hidden", "");
    a.setAttribute("href", url);
    a.setAttribute("download", "registered_users.csv");
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
  }

  customerServiceFilter.addEventListener("change", () => {
    currentPage = 1;
    loadRegisteredUsers(customerServiceFilter.value, searchInput.value, currentPage);
  });

  searchInput.addEventListener("input", () => {
    currentPage = 1;
    loadRegisteredUsers(customerServiceFilter.value, searchInput.value, currentPage);
  });

  window.addEventListener("scroll", handleScroll);

  loadRegisteredUsers();
  exportButton.addEventListener("click", exportToExcel);
});
login.js
document.addEventListener("DOMContentLoaded", function () {
  const loginForm = document.getElementById("loginForm");
  const formMessage = document.getElementById("formMessage");

  loginForm.addEventListener("submit", function (event) {
    event.preventDefault();

    const username = document.getElementById("username").value.trim();
    const password = document.getElementById("password").value.trim();
    const usernameError = document.getElementById("usernameError");
    const passwordError = document.getElementById("passwordError");

    usernameError.textContent = "";
    passwordError.textContent = "";
    formMessage.textContent = "";

    if (username === "" || password === "") {
      if (username === "") {
        usernameError.textContent = "اسم المستخدم مطلوب.";
      }
      if (password === "") {
        passwordError.textContent = "كلمة المرور مطلوبة.";
      }
      return;
    }

    fetch("/login", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ username, password }),
    })
      .then((response) => {
        if (response.ok) {
          window.location.href = "admin.html";
        } else {
          formMessage.textContent = "اسم المستخدم أو كلمة المرور غير صحيحة.";
        }
      })
      .catch(() => {
        formMessage.textContent = "حدث خطأ أثناء تسجيل الدخول.";
      });
  });
});
regesteration.js
document.addEventListener("DOMContentLoaded", function () {
  const registrationForm = document.getElementById("registrationForm");
  const drawPrizeButton = document.getElementById("drawPrizeButton");
  const winnerDisplay = document.getElementById("winner");

  registrationForm.addEventListener("submit", function (event) {
    event.preventDefault();

    const name = document.getElementById("name").value.trim();
    const phone = document.getElementById("phone").value.trim();
    const id = document.getElementById("id").value.trim();
    const nationalities = document.getElementById("nationalities").value.trim();
    const customerService = document.getElementById("customerService").value.trim();
    const prizeDraw = document.getElementById("prizeDraw").checked;

    const errors = validateForm(name, phone, id, nationalities, customerService);
    if (errors.length > 0) {
      errors.forEach(
        (error) => (document.getElementById(error.field).textContent = error.message)
      );
      return;
    }

    const user = { name, phone, id, nationalities, customerService, prizeDraw };

    fetch("/api/users", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(user),
    })
      .then((response) => response.json())
      .then(() => {
        alert("تم التسجيل بنجاح!");
        registrationForm.reset();
        clearErrors();
      });
  });

  drawPrizeButton.addEventListener("click", function () {
    fetch("/api/users")
      .then((response) => response.json())
      .then((users) => {
        const eligibleForDraw = users.filter((user) => user.prizeDraw);

        if (eligibleForDraw.length > 0) {
          const winner =
            eligibleForDraw[Math.floor(Math.random() * eligibleForDraw.length)];
          winnerDisplay.textContent = `الفائز: ${winner.name} - ${winner.phone} - ${winner.id}`;
        } else {
          winnerDisplay.textContent = "لا يوجد متقدمين للسحب.";
        }
      });
  });

  function validateForm(name, phone, id, nationalities, customerService) {
    const errors = [];

    if (name === "") {
      errors.push({ field: "nameError", message: "الاسم مطلوب." });
    }

    if (!/^05\d{8}$/.test(phone)) {
      errors.push({
        field: "phoneError",
        message: "رقم الجوال يجب أن يبدأ بـ 05 ويتكون من 10 أرقام.",
      });
    }

    if (!/^\d{10}$/.test(id)) {
      errors.push({
        field: "idError",
        message: "رقم الهوية السعودية يجب أن يتكون من 10 أرقام.",
      });
    }

    if (nationalities === "") {
      errors.push({
        field: "nationalitiesError",
        message: "الجنسيات المطلوبة مطلوبة.",
      });
    }

    if (customerService === "") {
      errors.push({
        field: "customerServiceError",
        message: "موظف خدمة العملاء مطلوب.",
      });
    }

    return errors;
  }

  function clearErrors() {
    document.querySelectorAll(".error").forEach((element) => {
      element.textContent = "";
    });
  }
});
admin.html
<!DOCTYPE html>
<html lang="ar">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>إدارة البيانات</title>
  <link rel="stylesheet" href="styles.css" />
</head>
<body>
  <div class="container">
    <h1>قائمة المسجلين</h1>

    <!-- Export Button at the Top -->
    <div class="export-container">
      <button id="exportButton">تصدير إلى Excel</button>
    </div>

    <!-- Filter and Search Container -->
    <div class="filter-search-container">
      <div class="search-field">
        <label for="searchInput">البحث:</label>
        <input type="text" id="searchInput" placeholder="ابحث بالاسم، رقم الجوال، رقم الهوية، الرقم، أو الجنسيات المطلوبة" />
      </div>

      <div class="filter-field">
        <label for="customerServiceFilter">فلتر حسب موظف خدمة العملاء:</label>
        <select id="customerServiceFilter">
          <option value="">الكل</option>
          <option value="Employee1">Employee1</option>
          <option value="Employee2">Employee2</option>
          <option value="Employee3">Employee3</option>
        </select>
      </div>
    </div>

    <div class="table-container">
      <table id="usersTable">
        <thead>
          <tr>
            <th>الرقم</th>
            <th>الاسم</th>
            <th>رقم الجوال</th>
            <th>رقم الهوية السعودية</th>
            <th>الجنسيات المطلوبة</th>
            <th>موظف خدمة العملاء</th>
            <th>مشارك في السحب</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
  </div>
  <script src="scripts/admin.js"></script>
</body>
</html>
login.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Login</title>
    <link rel="stylesheet" href="styles.css" />
  </head>
  <body>
    <div class="container">
      <h2>Admin Login</h2>
      <form id="loginForm">
        <label for="username">اسم المستخدم:</label>
        <input type="text" id="username" name="username" required />
        <div id="usernameError" class="error"></div>

        <label for="password">كلمة المرور:</label>
        <input type="password" id="password" name="password" required />
        <div id="passwordError" class="error"></div>

        <button type="submit">تسجيل الدخول</button>
        <div id="formMessage" class="form-message"></div>
      </form>
    </div>
    <script src="scripts/login.js"></script>
  </body>
</html>
index.html
<!DOCTYPE html>
<html lang="ar">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>تسجيل الزوار</title>
  <link rel="stylesheet" href="styles.css" />
</head>
<body>
  <div class="container">
    <div class="header">
      <img src="logo.webp" alt="Logo" class="logo" />
      <h1 class="welcome-text">
        أهلا بك ... أحصل على عروض نسمة أكيم بإدخال بياناتك في الأسفل
      </h1>
    </div>
    <h1>تسجيل الزوار</h1>
    <form id="registrationForm">
      <label for="name">الاسم:</label>
      <input type="text" id="name" name="name" placeholder="أدخل اسمك" required />
      <div class="error" id="nameError"></div>

      <label for="phone">رقم الجوال:</label>
      <input type="text" id="phone" name="phone" placeholder="05xxxxxxxx" required />
      <div class="error" id="phoneError"></div>

      <label for="id">رقم الهوية السعودية:</label>
      <input type="text" id="id" name="id" placeholder="أدخل رقم الهوية" required />
      <div class="error" id="idError"></div>

      <label for="nationalities">الجنسيات المطلوبة:</label>
      <input type="text" id="nationalities" name="nationalities" placeholder="أدخل الجنسيات المطلوبة" required />
      <div class="error" id="nationalitiesError"></div>

      <label for="customerService">موظف خدمة العملاء:</label>
      <select id="customerService" name="customerService" required>
        <option value="">اختر موظف خدمة العملاء</option>
        <option value="Employee1">Employee1</option>
        <option value="Employee2">Employee2</option>
        <option value="Employee3">Employee3</option>
      </select>
      <div class="error" id="customerServiceError"></div>

      <label class="checkbox-container">
        <input type="checkbox" id="prizeDraw" name="prizeDraw">
        أريد الاشتراك في السحب
      </label>
      

      <button type="submit" class="submit-btn">تسجيل</button>
    </form>

    <!--
    <button id="drawPrizeButton" class="draw-btn">سحب الفائز</button>
    <div id="winner" class="winner-display"></div>
    -->
  </div>
  <script src="scripts/registration.js"></script>
</body>
</html>
server.js file
const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");
const path = require("path");
const session = require("express-session");
const dotenv = require("dotenv");
const mongoose = require("mongoose");

dotenv.config(); // Load environment variables

const app = express();
const port = 3000;
const publicDir = path.join(__dirname, "public");

const apiRoutes = require("./api/users");
const authRoutes = require("./api/auth");

// MongoDB connection
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
  .then(() => console.log("Connected to MongoDB"))
  .catch((err) => console.error("Failed to connect to MongoDB:", err));

// Define Employee Schema and Model
const employeeSchema = new mongoose.Schema({
  name: { type: String, required: true },
});

const Employee = mongoose.model("Employee", employeeSchema);

app.use(cors());
app.use(bodyParser.json());
app.use(express.static(publicDir));

// Configure session middleware
app.use(
  session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: true,
    cookie: { secure: false }, // Set to true if using HTTPS
  })
);

// Middleware to check authentication for admin routes
function ensureAuthenticated(req, res, next) {
  if (req.session && req.session.authenticated) {
    return next();
  } else {
    res.redirect("/login.html");
  }
}

// API to get employees from MongoDB
app.get("/api/employees", async (req, res) => {
  try {
    const employees = await Employee.find(); // Fetch all employees
    res.json(employees);
  } catch (err) {
    res.status(500).json({ error: "Failed to retrieve employees" });
  }
});

// API to add a new employee to MongoDB
app.post("/api/employees", async (req, res) => {
  const { employeeName } = req.body;
  if (!employeeName) {
    return res.status(400).json({ error: "Employee name is required" });
  }

  try {
    const newEmployee = new Employee({ name: employeeName });
    await newEmployee.save();
    res.status(201).json(newEmployee);
  } catch (err) {
    res.status(500).json({ error: "Failed to add employee" });
  }
});

// API to delete an employee from MongoDB
app.delete("/api/employees/:id", async (req, res) => {
  try {
    await Employee.findByIdAndDelete(req.params.id);
    res.status(200).json({ message: "Employee deleted" });
  } catch (err) {
    res.status(500).json({ error: "Failed to delete employee" });
  }
});

app.use("/api", apiRoutes);
app.use("/", authRoutes);

app.get("/", (req, res) => {
  res.sendFile(path.join(publicDir, "index.html"));
});

app.get("/login.html", (req, res) => {
  res.sendFile(path.join(publicDir, "login.html"));
});

app.get("/admin.html", ensureAuthenticated, (req, res) => {
  res.sendFile(path.join(publicDir, "admin.html"));
});

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
